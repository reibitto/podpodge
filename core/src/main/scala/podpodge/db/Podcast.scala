package podpodge.db

import java.time.OffsetDateTime

import io.circe.{ Decoder, Encoder }
import io.circe.generic.semiauto._
import podpodge.json.JsonCodec._
import podpodge.types.PodcastId
import podpodge.youtube.Playlist

final case class Podcast[ID](
  id: ID,
  externalSource: String,
  title: String,
  description: String,
  category: String,
  generator: String,
  lastBuildDate: OffsetDateTime,
  publishDate: OffsetDateTime,
  author: String,
  subtitle: String,
  summary: String,
  image: Option[String],
  lastCheckDate: Option[OffsetDateTime]
)

object Podcast {
  type Model  = Podcast[PodcastId.Type]
  type Insert = Podcast[Unit]

  implicit val encoder: Encoder[Podcast.Model] = deriveEncoder[Podcast.Model]
  implicit val decoder: Decoder[Podcast.Model] = deriveDecoder[Podcast.Model]

  def fromPlaylist(playlist: Playlist): Podcast.Insert =
    Podcast(
      PodcastId.empty,
      playlist.id,
      playlist.snippet.title,
      playlist.snippet.description,
      "TV & Film",
      "Generated by Podpodge",
      OffsetDateTime.now,
      playlist.snippet.publishedAt,
      playlist.snippet.channelTitle,
      playlist.snippet.title,
      playlist.snippet.description,
      None,
      None
    )
}
